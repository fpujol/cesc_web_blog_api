// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  hashed_password,
  password_changed_at,  
  first_name,
  last_name,
  profile_image_path,
  salt,
  last_login,
  created_at,
  created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING email, hashed_password, password_changed_at, first_name, last_name, profile_image_path, salt, last_login, created_at, created_by, updated_at, updated_by
`

type CreateUserParams struct {
	Email             string         `json:"email"`
	HashedPassword    string         `json:"hashed_password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	FirstName         string         `json:"first_name"`
	LastName          string         `json:"last_name"`
	ProfileImagePath  sql.NullString `json:"profile_image_path"`
	Salt              int32          `json:"salt"`
	LastLogin         time.Time      `json:"last_login"`
	CreatedAt         time.Time      `json:"created_at"`
	CreatedBy         string         `json:"created_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FirstName,
		arg.LastName,
		arg.ProfileImagePath,
		arg.Salt,
		arg.LastLogin,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfileImagePath,
		&i.Salt,
		&i.LastLogin,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, hashed_password, password_changed_at, first_name, last_name, profile_image_path, salt, last_login, created_at, created_by, updated_at, updated_by FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfileImagePath,
		&i.Salt,
		&i.LastLogin,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateUserByEmail = `-- name: UpdateUserByEmail :one
UPDATE users
SET
  email = COALESCE($1, email),
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  profile_image_path = COALESCE($4, profile_image_path),
  salt = COALESCE($5, salt),
  last_login = COALESCE($6, last_login),
  hashed_password = COALESCE($7, hashed_password),
  password_changed_at = COALESCE($8, password_changed_at),
  created_at = COALESCE($9, created_at),
  created_by = COALESCE($10, created_by)
WHERE
  email = $1
RETURNING email, hashed_password, password_changed_at, first_name, last_name, profile_image_path, salt, last_login, created_at, created_by, updated_at, updated_by
`

type UpdateUserByEmailParams struct {
	Email             sql.NullString `json:"email"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	ProfileImagePath  sql.NullString `json:"profile_image_path"`
	Salt              sql.NullInt32  `json:"salt"`
	LastLogin         sql.NullTime   `json:"last_login"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	CreatedBy         sql.NullString `json:"created_by"`
}

func (q *Queries) UpdateUserByEmail(ctx context.Context, arg UpdateUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByEmail,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.ProfileImagePath,
		arg.Salt,
		arg.LastLogin,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfileImagePath,
		&i.Salt,
		&i.LastLogin,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
